"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[985],{5985:(t,n,e)=>{e.d(n,{A:()=>o});let o={id:"01-intro",title:"宣言的UIとは？",description:"宣言的UIの基本概念について解説",slides:[{id:"01-intro-1",title:"宣言的UIとは",descriptions:["宣言的UIとは「何を」表示するかを記述し、「どのように」表示するかの詳細はフレームワークに任せるアプローチ","状態という入力からUIを出力し、状態変化に応じた更新はフレームワークが自動的に行う","UIの構造や見た目を、どう作るのかの手順を記述する（命令的）のではなく、状態に基づいて定義する（宣言的）スタイル"],image:{url:"/declarative/宣言的UI.png",alt:"「宣言的UI」の概念を示す図（日本語の見出し付き）"}},{id:"01-intro-example",title:"よくある例え（車もってないけど……）",descriptions:["命令的：マニュアル車の運転のように、ギアの切り替えやクラッチ操作など、すべての手順を自分で制御する必要がある","宣言的：オートマ車の運転のように、「前に進む」「止まる」といった目的を伝えるだけで、内部の操作は車が自動で行う"],tweetUrl:"https://x.com/gethackteam/status/1268892357027663873"},{id:"01-intro-code",title:"コード比較：カウンターボタンの実装",descriptions:["同じ機能（ボタンクリックでカウントアップ）を命令的UIと宣言的UIで実装した例を比較して、アプローチの違いを明確にしてみる"],codeExamples:[{title:"命令的UI（JavaScript DOM）",language:"javascript",descriptions:["DOM要素を直接操作して内容を変更","状態（count変数）の更新とDOMの更新を明示的に記述","「どのように」UIを更新するかの手順に焦点を当てている"],code:"// HTML: <button id=\"counter\">0</button>\n\nfunction setupCounter() {\n  const button = document.getElementById('counter');\n  let count = 0;\n\n  button.addEventListener('click', () => {\n    // 状態の更新\n    count++;\n\n    // DOM要素の更新\n    button.textContent = count;\n  });\n}"},{title:"宣言的UI（React）",language:"jsx",descriptions:["状態(count)の変更がUIの更新を自動的にトリガー","setCount関数で状態を更新するだけでボタンの表示も自動的に更新","「何を」表示するかを記述し、DOMの更新処理はReactが担当"],code:"function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <button onClick={() => setCount(count + 1)}>\n      {count}\n    </button>\n  );\n}"}],codeLayout:"horizontal"},{id:"01-intro-merits",title:"両アプローチの選び方",descriptions:["「正しい」アプローチはなく、状況によって適切な選択が変わる","現代のフレームワークは宣言的な書き方で、内部では効率的な命令的更新を行っている"],list:{groups:[{title:"命令的UIを選ぶとき",points:["\uD83C\uDFAE 精密な制御が必要（複雑なアニメーションなど）","⚡ 極限のパフォーマンス最適化が必要","\uD83D\uDCDA 既存のDOM APIと直接やり取りする必要がある","\uD83D\uDD0D 特定の要素だけを細かく操作したい"]},{title:"宣言的UIを選ぶとき",points:["\uD83E\uDDE9 複雑なUIをシンプルに管理したい","\uD83D\uDD04 頻繁に変わる状態とUIの同期を保ちたい","\uD83D\uDC65 チーム開発で一貫性を保ちたい","♻️ コンポーネントを再利用したい"]}]}}]}}}]);