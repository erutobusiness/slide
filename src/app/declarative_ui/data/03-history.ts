import type { SlideSection } from '@/types/slides';

// 宣言的・宣言的UIの歴史セクションのスライドデータ
export const historySection: SlideSection = {
  id: '03-history',
  title: '宣言的・宣言的UIの歴史：コードの革命物語',
  description: '「どうやって」から「何を」へ —— 宣言的プログラミングが世界を変えた物語',
  slides: [
    {
      id: '03-history-start',
      title: '黎明期：計算機に「考えさせる」という革命的アイデア',
      descriptions: [
        '🧠 「機械に命令するのではなく、問題を教えて解かせる」という壮大な挑戦の始まり',
        '🧮 ラムダ計算（1930年代）：「計算とは関数である」という革命的発想で、プログラミングの哲学的基礎を築く',
        '💡 命令型：「ステップ1をやって、次にステップ2をやって...」vs 関数型：「私の欲しい結果はこれです」',
        '🔍 Lisp（1950年代）：「コードもデータも同じ」という驚きの概念で、プログラマの可能性を無限に広げる',
        '🎨 Sketchpad（1963年）：「マウスで絵を描くと、コンピュータが理解する」という魔法のような体験を実現',
        '📝 ※興味深い事実：この時代には「宣言的プログラミング」という言葉自体はまだ使われていなかった',
      ],
      /*
      【スピーカーノート】
      - ここでは「宣言的」という用語ではなく、「数学的」「論理的」「関数型」という言葉が使われていたことを強調すると良い
      - チューリングとチャーチの論争（効率 vs 抽象度）の話を入れると歴史の深みが増す
      - ラムダ計算がなぜ革命的だったかの具体例：「x→x+1」という関数を考えるだけで、ステップバイステップの手続きなしに計算を表現できた
      - アラン・ケイの「プログラミングの本質は問題解決であり、その解決方法を記述することではない」という言葉を引用すると効果的
      - イヴァン・サザーランドがSketchpadを開発した時のエピソード：「コンピュータに絵を描かせるのではなく、私の意図を理解させたかった」
      - 工学や信号処理の分野でも宣言的アプローチが模索されていた点（Karsai & Sztipanovits, 1988）に触れると、コンピュータサイエンス以外への広がりが示せる
      */
    },
    {
      id: '03-history-1970s',
      title: '1970年代：「論理」が計算の世界を征服する',
      descriptions: [
        `🧩 Prolog（1972年）：「事実」と「ルール」だけを教えれば、コンピュータが自分で推論してくれる魔法
        例：「ソクラテスは人間である」「人間は死ぬ」→「ソクラテスは死ぬ」を自動的に導き出す`,
        '🔮 制約プログラミング：「この条件を満たす解を見つけて」とお願いするだけで、複雑な問題を解決',
        '📚 TeX（1978年）：「数式はこう書いてほしい」と伝えるだけで、美しい組版を実現した魔法の言語',
        '💭 考えてみよう：命令型だと「フォントサイズを12ptにして、この位置に配置して...」と100ステップ。宣言型だと「見出し」と一言で完了！',
        '🎓 計算機科学での進展：この時代に「宣言的意味論（Declarative Semantics）」が学術的な専門用語として確立',
      ],
      /*
      【スピーカーノート】
      - 「宣言的意味論」とは、プログラムの意味を「何をするか」で定義する方法で、Prologなどの論理型言語の理論的基盤となった
      - Robert Kowalskiの有名な方程式「Algorithm = Logic + Control」（1979年）について触れると良い
      - Prologの実際の応用例：エキスパートシステム、自然言語処理、データベースクエリなど
      - TeXがなぜ革命的だったか：「\section{タイトル}」と書くだけで、適切なフォント、サイズ、スペースが自動的に決まる
      - 制約プログラミングの具体例：時間割作成、工場のスケジューリング、パズルソルバーなど
      - 論理プログラミングの限界と「フレーム問題」についても触れると、バランスの取れた説明になる
      - Van Hentenryck（1995年）による制約プログラミングの発展について触れると学術的な深みが増す
      */
    },
    {
      id: '03-history-1980s',
      title: '1980年代：SQLという魔法の言語がデータの世界を変える',
      descriptions: [
        '💫 SQL：「レストランでの注文」のように、「何が欲しいか」だけを伝えると、最適な方法でデータを取得',
        '命令型：「テーブルの各行を読んで、条件に合うか確認して、合えば結果に追加して...」',
        '宣言型：「SELECT * FROM users WHERE age > 20」たったこれだけ！',
        '🌟 SQL誕生の裏話：IBMの研究者たちは当初、一般のプログラマには難しすぎると考えていたが、その直感的さで世界を征服',
        '🏆 40年以上経った今も現役のSQL。宣言的アプローチの「勝利」を証明する生きた化石',
      ],
      /*
      【スピーカーノート】
      - SQLの正式名称「Structured Query Language」は当初「SEQUEL」と呼ばれていたというトリビア
      - リレーショナルデータベースの理論的基盤を作ったエドガー・F・コッドの功績について触れると良い
      - 実演：簡単なSQLクエリと同等の命令型コードを比較すると効果的（10行のSQLが100行の命令型コードに相当することを示す）
      - NoSQLムーブメントについても触れると現代との接続になる：「宣言的なクエリの強みを保ちながら柔軟性を高める試み」
      - データベース最適化の話：SQLの宣言的な性質がどのようにクエリオプティマイザを可能にし、パフォーマンスを向上させたか
      - 「SQLインジェクション」など、宣言的言語の安全性の課題についても触れるとバランスが良い
      - SQLの標準化プロセス（ANSI SQL 1986年）が言語の普及にどう貢献したかについて言及すると、技術史的観点が深まる
      */
    },
    {
      id: '03-history-1990s',
      title: '1990年代：HTMLが一般人にも開かれたウェブの扉',
      descriptions: [
        '🌐 HTML：「このテキストは見出し」「これはリンク」とだけ宣言するだけで、世界中で同じように表示される奇跡',
        '🎭 モデルベースUI (MB-UIDE)：「見た目」と「ロジック」を分離する革命的アイデアが、現代UIフレームワークの礎に',
        '💅 CSS：「青い」「大きい」「中央寄せ」という宣言だけでデザインを表現する、アーティストのための言語',
        '📊 XML：「データの意味」を構造化する方法を提供し、人間とコンピュータの両方が理解できる共通言語に',
        '🧠 Haskell：「副作用なしの純粋な関数」という極限の宣言的世界を追求した言語が、実用の世界へ',
      ],
      /*
      【スピーカーノート】
      - ティム・バーナーズ・リーがHTMLを設計した際の理念：「情報の意味を表現し、表示方法は閲覧者に委ねる」という考え方
      - HTMLの宣言的な性質がインターネットの爆発的普及を支えた理由：異なるデバイスや環境でも同じ内容が表示できる
      - CSSが登場する前は、見た目の指定もHTMLに埋め込まれていたことを示す「before/after」の例を出すと効果的
      - XMLとSGMLの関係や、構造化データが現代のJSON、YAMLなどにつながる流れを説明すると歴史的な流れが見える
      - Haskellの具体的な例：「map (+1) [1,2,3]」というシンプルなコードが持つ意味と、命令型との比較
      - この時代の「パラダイムの混在」：多くの言語が宣言的要素を取り入れ始めた（例：JavaのAnnotation）
      - モデルベースUI開発（MB-UIDE）の研究（Szekely et al., 1995; Pinheiro da Silva, 2000）が現代のUI設計の基盤になった点を強調
      - MASTERMINDのような環境が高レベル仕様からコードを自動生成した例を紹介すると、現代のAIコード生成との接続点になる
      */
    },
    {
      id: '03-history-2000s',
      title: '2000年代：宣言的アプローチが実用の世界を征服',
      descriptions: [
        '🚀 Scala、F#、Clojure：「関数型は美しいが実用的でない」という神話を打ち破り、産業界で活躍',
        '🔄 XSLT/XPath：「データの変換」さえも宣言的に記述できるという驚きの概念が一般化',
        '☁️ Infrastructure as Code：「サーバーはこうあるべき」と宣言するだけで、インフラが自動的に構築される革命',
        '📱 リアクティブプログラミング：「データが変わったら、UIも自動的に変わる」という、現代UIの基盤となる概念の誕生',
        '🧪 関数型論理プログラミング：複数のパラダイムを組み合わせることで、より強力な表現力を実現（Hanus, 2007）',
      ],
      /*
      【スピーカーノート】
      - マルチコアプロセッサの普及が宣言的・関数型言語の再評価につながった理由：並行処理の扱いやすさ
      - Scalaの創始者Martin Oderskyの言葉「オブジェクト指向と関数型の良いとこ取り」を引用すると良い
      - XSLTの具体例：同じXMLから異なる形式（HTML、PDF、別のXML）を生成する能力の驚異
      - Infrastructure as Codeの革命：Chef、Puppet、後のAnsible、Terraformにつながる流れ
      - Facebookの「Flux」アーキテクチャとリアクティブプログラミングの関連性
      - この時代の大きな転換点：「宣言的」が学術的な概念から、実用的なテクニックとして一般のプログラマに認知されるようになった
      - Michael Hanus（2000, 2007）による関数型論理プログラミングの研究がGUIとWeb UI構築に与えた影響について言及
      - Darlington et al.（1990）の研究が現代の並列システム開発にどうつながったかを説明すると、学術から実用への橋渡しが示せる
      */
    },
    {
      id: '03-history-2010s',
      title: '2010年代：Reactの衝撃 —— UIの常識を覆した宣言的革命',
      descriptions: [
        '⚛️ React（2013年）：「UIはただの関数」という衝撃的な発想で、フロントエンド開発を根本から変革',
        '命令型UI：「ボタンがクリックされたら、テキストを変更して、色を変えて...」',
        '宣言型UI：「state = {clicked: true}なら、こう表示する」たったこれだけ！',
        '🌈 宣言的UIの爆発的普及：Vue.js、Flutter、SwiftUIなど、すべての主要プラットフォームが宣言的パラダイムを採用',
        '👑 「命令的」vs「宣言的」の戦いは、すでに宣言的の圧勝で終わっていた',
      ],
      /*
      【スピーカーノート】
      - Reactの誕生秘話：もともとFacebookの広告管理ツールのために開発されたが、その可能性に気づいてオープンソース化
      - ジョーダン・ウォーク（React開発者）の言葉「UIはただの関数 f(state) = view」を引用すると効果的
      - Virtual DOMの革新性：宣言的UIを効率的に実現するための裏側の仕組み
      - Reactに対する初期の反応：「JSXは良くない」「DOMを直接操作すべき」という批判から受容へ
      - 具体例を示す：同じUI更新を命令型（jQuery）と宣言型（React）で比較するコードスニペット
      - SwiftUIの登場（2019年）がAppleの宣言的UIへの転換を象徴。以前のUIKit（命令型）との比較
      - 「Reactiveプログラミング」と「React」の名前の類似性は偶然ではない：両者の宣言的な性質の関連性
      - ReactはPure Functionの概念を活用することで、UIを宣言的かつ予測可能にした点を強調すると、関数型プログラミングとのつながりが示せる
      */
    },
    {
      id: '03-history-now',
      title: '現代：宣言的アプローチが世界を「自己修復」する時代へ',
      descriptions: [
        '🤖 AI時代の宣言的プログラミング：「こんな結果がほしい」と伝えるだけで、AIが最適な実装を提案',
        '☁️ クラウドネイティブの世界：「こんなシステムが欲しい」という宣言から、自己修復するシステムが自動生成',
        '🔄 Kubernetes：「10個のコンテナが常に動いていてほしい」と宣言するだけで、障害が起きても自動復旧',
        '🌐 マルチパラダイム統合：関数型、論理、制約などを融合させ、さらに強力な問題解決アプローチを実現',
        '🚀 低コード/ノーコードプラットフォーム：宣言的アプローチの究極形として、プログラミング不要のシステム構築を実現',
      ],
      /*
      【スピーカーノート】
      - Kubernetesの中核理念「Desired State Configuration」は宣言的アプローチの典型
      - GitOpsの革新：「リポジトリの状態がシステムの状態」という宣言的なシステム管理のアプローチ
      - AIとの対話はますます宣言的に：「このようなUIを作成して」という要求からコードが生成される
      - 自動修復の具体例：Kubernetes Podが死んだら自動的に再起動される様子をデモで見せると効果的
      - Terraformの宣言的アプローチ：「.tf」ファイルで宣言するだけでクラウドリソースが自動構築
      - 低コード/ノーコードプラットフォームの例：Microsoft Power Apps、Webflow、Bubbleなど
      - 「宣言的」の次に来るパラダイムの予測：インテント駆動型プログラミング？対話型AI協働開発？
      - McIlraith（2004）のWebサービス自動連携研究に触れると、AIと宣言的アプローチの融合の歴史的背景が説明できる
      - 宣言的アプローチの応用領域の多様性：SDN（Software-Defined Networking）、NETCONF/YANGによるネットワーク設定など
      - Apt et al.（2011）による宣言的手法の機械学習、計算生物学、自然言語処理への応用研究について言及すると、学術的な最新動向が示せる
      */
    },
    {
      id: '03-history-summary',
      title: '宣言的プログラミングの旅：過去から未来へ',
      descriptions: [
        '👨‍🔬 アカデミックな理論から始まり、実用的な技術へと進化した宣言的プログラミングの壮大な旅',
        '💡 「何をしたいか」だけを伝えれば、「どうやって」は機械が考える —— この単純な発想が世界を変えた',
        '🌉 UIからインフラまで、あらゆる領域を征服した宣言的アプローチは、プログラミングの未来を示している',
        '🔮 抽象化レベルを高め「何を」達成したいかに集中させることで、複雑なシステムの開発を簡素化',
        '🚀 再現性・保守性・自動化を促進する現代ソフトウェア開発における重要な考え方',
      ],
      image: {
        url: '/declarative/PXL_20250430_135602763.PORTRAIT.ORIGINAL.jpg',
        position: 'bottom',
      },
      /*
      【スピーカーノート】
      - このセクションでは、黎明期に「宣言的」という言葉がなかったことと、現代では当たり前になっていることのコントラストを強調すると効果的
      - 歴史の流れを「抽象化のレベルの向上」として説明：機械語→アセンブリ→高級言語→宣言的言語→AIとの対話
      - 宣言的プログラミングが成功した根本的な理由：人間の思考方法に近いアプローチであること
      - 未来の展望：AIとの協働開発、意図ベースのプログラミング、自己最適化システム
      - 宣言的プログラミングがもたらす社会的影響：プログラミングの民主化、「コードを書く」という概念の変化
      - クロージングには、「宣言的プログラミングは、技術の進化というより、人間とコンピュータの関係の進化である」というメッセージが効果的
      - 工学分野での起源から、論理、関数、制約といったパラダイムを取り込み進化してきた全体像を俯瞰すると良い
      - 今後のマルチパラダイム統合、ツールサポートの進化、新たな応用分野への展開の可能性について触れると、未来志向の締めくくりになる
      */
    },
  ],
};
